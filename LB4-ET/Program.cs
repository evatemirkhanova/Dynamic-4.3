using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

/*  У Васи есть калькулятор, который умеет выполнять три операции: 
 *  прибавить 1, умножить на 2 и умножить на 3 Какое наименьшее число операций необходимо для того, 
 *  чтобы получить из числа 1 число n. Время O(n).  */


namespace LB4_ET
{
    class Program
    {
        /// <summary>
        /// Основной метод программы.
        /// </summary>
        static void Main(string[] args)
        {
            Console.Write("Введите число n: ");
            int n = Convert.ToInt32(Console.ReadLine());

            // Массив для хранения минимального количества операций для каждого числа от 1 до n.
            int[] minOperations = new int[n + 1];

            // Базовый случай: минимальное количество операций для преобразования числа 1 в 1 равно 0.
            minOperations[1] = 0;

            // Заполнение массива minOperations.
            for (int currentNum = 2; currentNum <= n; currentNum++)
            {
                // Операция "+1": минимальное количество операций для числа currentNum
                // равно минимальному количеству операций для числа currentNum - 1 плюс 1.

                minOperations[currentNum] = minOperations[currentNum - 1] + 1;

                // Если текущее число делится на 2 без остатка, проверяем,
                // уменьшится ли количество операций при делении текущего числа на 2.

                if (currentNum % 2 == 0)
                {
                    // Операция "x2": минимальное количество операций для числа currentNum равно минимальному
                    // количеству операций для числа currentNum или числа currentNum / 2 плюс 1, в зависимости от того, что меньше.

                    minOperations[currentNum] = Math.Min(minOperations[currentNum], minOperations[currentNum / 2] + 1);
                }

                // Если текущее число делится на 3 без остатка, проверяем, уменьшится ли количество операций при делении текущего числа на 3.
                if (currentNum % 3 == 0)
                {
                    // Операция "x3": минимальное количество операций для числа currentNum равно минимальному
                    // количеству операций для числа currentNum или числа currentNum / 3 плюс 1, в зависимости от того, что меньше.

                    minOperations[currentNum] = Math.Min(minOperations[currentNum], minOperations[currentNum / 3] + 1);
                }
            }

            // Вывод результата.
            Console.WriteLine("Минимальное количество операций для числа " + n + ": " + minOperations[n]);
        }
    }













    /* Основная идея решения данной задачи заключается в использовании ДИНАМИЧЕСКОГО ПРОГРАММИРОВАНИЯ ДЛЯ ОПТИМИЗАЦИИ ВЫЧИСЛЕНИЙ.

    Мы создаем массив minOperations, где minOperations[i] будет хранить минимальное количество операций, необходимых для превращения числа 1 в число i.

    Инициализируем minOperations[1] равным 0, потому что минимальное количество операций для превращения числа 1 в число 1 равно 0 (нет операций).

    Затем мы перебираем числа от 2 до n и вычисляем минимальное количество операций для каждого числа:

    Для числа i, чтобы вычислить minOperations[i], мы можем взять minOperations[i-1] и добавить одну операцию, чтобы получить i.

    Также мы проверяем, делится ли i на 2 или 3 без остатка. Если делится, мы можем поделить i на 2 или 3 соответственно 
    и проверить, сколько операций нам потребуется, чтобы получить i. Мы выбираем минимальное количество операций.

    После того как мы вычислили minOperations[n], мы получаем минимальное количество операций, необходимых для превращения числа 1 в число n.

    Это решение имеет линейную сложность O(n), так как мы выполняем только один проход по числам от 2 до n, каждый раз обновляя значение в массиве minOperations. */
}
